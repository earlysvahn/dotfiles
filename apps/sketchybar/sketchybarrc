#!/bin/bash

# Check if CONFIG_DIR is set
if [ -z "$CONFIG_DIR" ]; then
  echo "Error: CONFIG_DIR is not defined. Please set CONFIG_DIR before running the script."
  exit 1
fi

# Check if CONFIG_DIR exists
if [ ! -d "$CONFIG_DIR" ]; then
  echo "Error: CONFIG_DIR ($CONFIG_DIR) does not exist!"
  exit 1
fi

# Set up directory paths
ITEM_DIR="$CONFIG_DIR/items"     # Directory where the items are configured
PLUGIN_DIR="$CONFIG_DIR/plugins" # Directory where all the plugin scripts are stored

# Check if PLUGIN_DIR exists
if [ ! -d "$PLUGIN_DIR" ]; then
  echo "Error: PLUGIN_DIR ($PLUGIN_DIR) does not exist!"
  exit 1
fi

# Debugging: Print out the directory paths
echo "CONFIG_DIR is set to: $CONFIG_DIR"
echo "PLUGIN_DIR is set to: $PLUGIN_DIR"

# Display contents of PLUGIN_DIR for debugging
echo "Contents of PLUGIN_DIR:"
ls -la "$PLUGIN_DIR"

# Load configuration files
source "$CONFIG_DIR/colors.sh" # Loads all defined colors
source "$CONFIG_DIR/icons.sh"  # Loads all defined icons

FONT="SF Pro" # Needs to have Regular, Bold, Semibold, Heavy, and Black variants
PADDINGS=3    # All paddings use this value (icon, label, background)

# aerospace setting
AEROSPACE_FOCUSED_MONITOR_NO=$(aerospace list-workspaces --focused)
AEROSPACE_LIST_OF_WINDOWS_IN_FOCUSED_MONITOR=$(aerospace list-windows --workspace "$AEROSPACE_FOCUSED_MONITOR_NO" | awk -F'|' '{gsub(/^ *| *$/, "", $2); print $2}')

# Setting up and starting the helper process
HELPER=git.felix.helper
killall helper 2>/dev/null
(cd "$CONFIG_DIR/helper" && make)
"$CONFIG_DIR/helper/helper" "$HELPER" >/dev/null 2>&1 &

# Unload the macOS on-screen indicator overlay for volume change
launchctl unload -F /System/Library/LaunchAgents/com.apple.OSDUIHelper.plist >/dev/null 2>&1 &

# Setting up the general appearance of the bar
bar=(
  height=45
  color=$BAR_COLOR
  border_width=2
  border_color=$BAR_BORDER_COLOR
  shadow=off
  position=top
  sticky=on
  padding_right=10
  padding_left=10
  y_offset=-5
  margin=-2
  topmost=window
  color=0x00000000
  border_color=0x00000000
)

sketchybar --bar "${bar[@]}"

# Setting up default values
defaults=(
  updates=when_shown
  icon.font="$FONT:Regular:14.0"
  icon.color=$ICON_COLOR
  icon.padding_left=$PADDINGS
  icon.padding_right=$PADDINGS
  label.font="$FONT:Semibold:13.0"
  label.color=$LABEL_COLOR
  label.padding_left=$PADDINGS
  label.padding_right=$PADDINGS
  label.shadow.drawing=on
  label.shadow.distance=2
  label.shadow.color=0xff000000
  padding_right=$PADDINGS
  padding_left=$PADDINGS
  background.height=26
  background.corner_radius=9
  background.border_width=2
  popup.background.border_width=2
  popup.background.corner_radius=9
  popup.background.border_color=$POPUP_BORDER_COLOR
  popup.background.color=$POPUP_BACKGROUND_COLOR
  popup.blur_radius=20
  popup.background.shadow.drawing=on
  scroll_texts=on
)

sketchybar --default "${defaults[@]}"

# Left items
# source "$ITEM_DIR/apple.sh"
source "$ITEM_DIR/spaces.sh"
source "$ITEM_DIR/front_app.sh"

# Center
source "$ITEM_DIR/spotify.sh"
# source "$ITEM_DIR/media.sh"
source "$ITEM_DIR/github_prs.sh"
source "$ITEM_DIR/github_issues.sh"

# Right items
source "$ITEM_DIR/calendar.sh"
source "$ITEM_DIR/battery.sh"
source "$ITEM_DIR/wifi.sh"
source "$ITEM_DIR/volume.sh"
source "$ITEM_DIR/weather.sh"

# Enable sketchybar hotload
sketchybar --hotload on

# Forcing all item scripts to run (never do this outside of sketchybarrc)
sketchybar --update
echo "Sketchybar configuration loaded successfully."
