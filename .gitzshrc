# git aliases
alias add="git add -A"
alias clone="git clone"
alias ga="git add -A"
alias commit="git commit -m"
alias gc="git commit -m"
alias push="git push"
alias cont='git rebase --continue'
alias gp="git push"
alias pushup="git push -u origin HEAD"
alias gpu="git push -u origin HEAD"
alias reset="git reset --hard HEAD"
alias gr="git reset --hard HEAD"
alias get="git pull"
alias gf="git pull"
alias status="git status"
alias gs="git status"
alias diff="git diff"
alias gd="git diff"
alias checkout="git checkout"
alias gco="git checkout"
alias checkoutb="git checkout -b"
alias gcb="git checkout -b"
alias prev="git checkout -"
alias gcp="git checkout -"
alias lazy='lazygit'
alias gl='glgg --pretty=oneline --abbrev-commit'
alias build='gh workflow run'

alias watch='tmux split-window -h "zsh -c \"gh run watch\""' 

#clonrepo() - clones repo into developent, if -c is passed, it will clone into current directory
function clonerepo {
    local dir="$HOME/development"  # Default directory

    while getopts "c" opt; do
        case $opt in
            c)
                dir="$PWD"  # Set directory to current directory if -c flag is used
                ;;
            \?)
                echo "Invalid option: -$OPTARG" >&2
                return 1
                ;;
        esac
    done

    shift $((OPTIND - 1))

    if [ -z "$1" ]; then
        echo "Usage: clonerepo [-c] <repo-name>"
    else
        git clone "https://github.com/dooris-dev/$1.git" "$dir/$1"
    fi
}


# gitopen() - open current repo in github, if -a or --action is passed, open the actions page
alias gopen='bash ~/dotfiles/scripts/git-open.sh'

# gitpush() - Add all changes, commit with a message and push to the remote repository
gitpush() {
    git add -A && git commit -m "$1" && git push
}

# gitpull() - Pull the latest changes from all repositories
getall() {
    repo_directory=~/development
    green='\033[0;32m'
    red='\033[0;31m'
    yellow='\033[0;33m'
    reset='\033[0m'
    cd "$repo_directory" || return

    for repo in */; do
        cd "$repo" || continue
        echo "Updating repository: $repo"

        if [ "$repo" = "dooris-repo/" ]; then
            if git pull origin main-k8s &> /dev/null; then
                if [ -n "$(git log HEAD..@{u})" ]; then
                    echo -e "${green}Fetched latest changes${reset}"
                else
                    echo -e "${yellow}Already up to date.${reset}"
                fi
            else
                echo -e "${red}Could not fetch for repo $repo${reset}"
            fi
        else
            if git pull origin main &> /dev/null; then
                if [ -n "$(git log HEAD..@{u})" ]; then
                    echo -e "${green}Fetched latest changes${reset}"
                else
                    echo -e "${yellow}Already up to date.${reset}"
                fi
            else
                echo -e "${red}Could not fetch for repo $repo${reset}"
            fi
        fi

        cd ..
    done
}


issue() {
    local issue_number="$1"
    local action="$2"
    local temp_file="/tmp/issue_description_${issue_number}.txt"

    # Function to display the list of issues and select one
    select_issue() {
        # Get the issue list and format it for selection
        local issue_list=$(gh issue list --limit 50 --json number,title | jq -r '.[] | "\(.number): \(.title)"')

        # Use fzf or select to choose the issue if no issue number was passed
        issue_number=$(echo "$issue_list" | fzf --prompt="Select an issue: " | cut -d':' -f1)

        if [[ -z "$issue_number" ]]; then
            echo "No issue selected."
            return 1
        fi
    }

    # If no issue number is provided, use the select_issue function to choose one
    if [[ -z "$issue_number" ]]; then
        select_issue
        if [[ $? -ne 0 ]]; then
            return 1
        fi
    fi

    # If no action is provided, prompt for action (view, comment, or edit)
    if [[ -z "$action" ]]; then
        echo "Choose action: (v)iew / (c)omment / (e)dit"
        read -r action
    fi

    # Handle view action
    if [[ "$action" == "v" || "$action" == "--view" ]]; then
        gh issue view "$issue_number"
        return
    fi

    # Handle comment action
    if [[ "$action" == "c" || "$action" == "--comment" ]]; then
        # Prepopulate the comment with team mentions
        echo -e "@kjbakke @RobinGranqvistEB @storm84\n" > "$temp_file"
        nvim +2 "$temp_file"
        printf "Do you want to comment on issue $issue_number? (y/n): "
        read answer
        if [ "$answer" = "y" ]; then
            gh issue comment "$issue_number" --body "$(cat "$temp_file")"
            echo "Comment added to issue $issue_number."
        else
            echo "No comment was added to issue $issue_number."
        fi
        return
    fi

    # Handle edit action
    if [[ "$action" == "e" || "$action" == "--edit" ]]; then
        # Get the current issue description
        local issue_description=$(gh issue view "$issue_number" --json "body" 2>/dev/null | jq -r ".body")
        if [[ -z "$issue_description" ]]; then
            echo "Error: Unable to fetch issue details. Please check if the issue number is correct."
            return 1
        fi

        # Write the description to the temp file
        echo "$issue_description" > "$temp_file"
        nvim "$temp_file"

        printf "Do you want to update the issue with the modified description? (y/n): "
        read answer
        if [ "$answer" = "y" ]; then
            gh issue edit "$issue_number" --body "$(cat "$temp_file")"
            echo "Issue $issue_number updated successfully."
        else
            echo "No changes were made to issue $issue_number."
        fi
        return
    fi

    # If none of the above actions are selected, show an error
    echo "Invalid action. Please choose (v)iew, (c)omment, or (e)dit."
}

# issues() - List all issues for the current repository
issues() {
  gh issue list
}

# dpd() - .deploy dev for the PR, usage: deploydev PR_NUMBER
dpd() {
  gh pr comment "$1" --body ".deploy dev"
}

# dpt() - .deploy dev for the PR, usage: deploytest PR_NUMBER
dpt() {
  gh pr comment "$1" --body ".deploy test"
}

# dps() - .deploy dev for the PR, usage: deploystage PR_NUMBER
dps() {
  gh pr comment "$1" --body ".deploy stage"
}

# pr() - Create a pull request to the base branch, usage: pr [base_branch] (default: main)
pr() {
  local base_branch="main"

  case "$1" in
    "main")
      base_branch="main"
      ;;
    "k8s")
      base_branch="main-k8s"
      ;;
    *)
      base_branch="$1"
      ;;
  esac

  gh pr create --base "$base_branch" --head "$(git branch --show-current)"
}

# rebase() - Rebase the current branch onto the base branch, usage: rebase [base_branch] (default: main)
rebase() {
  local base_branch="main"

  case "$1" in
    "main")
      base_branch="main"
      ;;
    "k8s")
      base_branch="main-k8s"
      ;;
    *)
      base_branch="$1"
      ;;
  esac

  local current_branch=$(git rev-parse --abbrev-ref HEAD)

  if [ "$current_branch" = "$base_branch" ]; then
    echo "‚ö†Ô∏è You are already on the $base_branch branch"
    echo "‚¨áÔ∏è Pulling latest changes from $base_branch"
    git pull
    return 0
  fi

  echo "üîÑ Switching from $current_branch to $base_branch"
  sleep 0.5
  git checkout $base_branch

  echo "‚¨áÔ∏è Pulling latest changes from $base_branch"
  sleep 0.5
  git fetch origin $base_branch

  if git diff --quiet $base_branch origin/$base_branch; then
    echo "‚úÖ No changes in $base_branch"
  else
    echo "üîÑ Changes detected in $base_branch, pulling changes"
    git pull
  fi

  sleep 0.5
  echo "üîÑ Changing back to $current_branch"
  git checkout -

  sleep 0.5
  echo "üîÑ Rebasing $base_branch onto $current_branch"
  if git rebase "$base_branch"; then
    echo "‚úÖ Rebase successful"
  else
    echo "‚ùå Rebase failed. Please resolve conflicts and then continue the rebase manually."
  fi
}

# Use to get all PRs created by @me for the current directory
alias prs='gh pr list --author "@me"'
alias work='bash ~/dotfiles/scripts/work-on-issue.sh'


